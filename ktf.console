#!/usr/bin/env python
#HEAD#########################################################
#
# Katana Framework | ktf.console                            
# Last Modified: 29/07/2016
#
#########################################################HEAD#

from core.Function import (
	KatanaCheckActionShowModules,
	KatanaCheckActionUseModule,
	KatanaCheckActionExefunction,
	KatanaCheckActionShowOptions,
	KatanaCheckActionisBack,
	KatanaCheckActionGlobalCommands,
	KatanaCheckActionShowMOptions,
	KatanaCheckActionGetInfo,
	KatanaCheckActionSetValue,
	LoadBuffer,
	ShowFullOptions,
	Executefunction,
	ShowInformationModule,
	ShowOptions,
	UpdateValue,
	runModule,
	GetRootModules,
	ListModules)

from core import Banner , Errors 
from core.GeneralCommands import *
from core.Design import *
import importlib, argparse

parser = argparse.ArgumentParser(description='Args for Console mode.',epilog='for More information go to https://github.com/powerscript/katanaframework')
parser.add_argument("-l", "--list", action='store_true', default=False, help="List Modules installed")
parser.add_argument("-q", "--quit", action='store_false', default=True, help="No show Banner")
args = parser.parse_args()

def katanaFrameworkConsole():
	try:
		action = raw_input(MainPrompt())
		if KatanaCheckActionShowModules(action):
			ListModules()
			katanaFrameworkConsole()
		if KatanaCheckActionUseModule(action):
			root=GetRootModules()
			for modules in root.findall('module'):
				if action[len(SELECT)+1:] == modules.get('name'):
					category = modules.find('category').text
					filename = modules.find('filename').text
					ModuleToStart = importlib.import_module("modules."+category+"."+filename) 
					init=ModuleToStart.init()
					while True:
						try:
							actions=raw_input(Prompt(init.CodeName))
							if   KatanaCheckActionShowOptions(actions)  :ShowOptions(init)
							elif KatanaCheckActionShowMOptions(actions) :ShowFullOptions(init)
							elif KatanaCheckActionExefunction(actions)  :Executefunction(actions)
							elif KatanaCheckActionSetValue(actions)     :init=UpdateValue(actions,init)
							elif KatanaCheckActionGetInfo(actions)      :ShowInformationModule(init)
							elif runModule(actions):
								for Namevalue in init.options:
									init.var.update({Namevalue:init.options[Namevalue][0]})
								try:
									for Namevalue in init.extra:
										init.var.update({Namevalue:init.extra[Namevalue][0]})
								except:Nothing=False
								ModuleToStart.main(True)
							elif KatanaCheckActionisBack(actions)       :katanaFrameworkConsole()
							else:KatanaCheckActionGlobalCommands(actions)
						except:Errors.Errors()
			katanaFrameworkConsole()
		elif KatanaCheckActionExefunction(action):Executefunction(action)
		else                                     :KatanaCheckActionGlobalCommands(action)
		katanaFrameworkConsole()
	except:Errors.Errors()
	  
if __name__=="__main__":
	LoadBuffer()
	if args.quit:Banner.LoadBanner()
	if args.list:
		ListModules()
		exit()
	katanaFrameworkConsole()
